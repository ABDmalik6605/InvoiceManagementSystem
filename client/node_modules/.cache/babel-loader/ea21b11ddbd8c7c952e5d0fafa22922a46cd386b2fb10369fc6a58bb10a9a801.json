{"ast":null,"code":"import axios from 'axios';\n\n// No need for full URL since we have proxy configured\n// const API_BASE_URL = 'http://localhost:3000';\n\n// Configure axios defaults\n// axios.defaults.baseURL = API_BASE_URL;\naxios.defaults.withCredentials = true;\n\n// API utility functions\nexport const api = {\n  // Authentication\n  checkAuthStatus: async () => {\n    const response = await axios.get('/api/status');\n    return response.data;\n  },\n  // AI Chat\n  sendChatMessage: async (message, sessionId = 'default') => {\n    const response = await axios.post('/api/ai/chat', {\n      message,\n      sessionId\n    });\n    return response.data;\n  },\n  // Invoices\n  getInvoices: async (params = {}) => {\n    const response = await axios.get('/api/invoices', {\n      params\n    });\n    return response.data;\n  },\n  getInvoiceById: async id => {\n    const response = await axios.get(`/api/invoices/${id}`);\n    return response.data;\n  },\n  createInvoice: async invoiceData => {\n    const response = await axios.post('/api/invoices', invoiceData);\n    return response.data;\n  },\n  // Company\n  getCompanyInfo: async () => {\n    const response = await axios.get('/api/company');\n    return response.data;\n  },\n  // Bulk data\n  getBulkData: async () => {\n    const response = await axios.get('/api/bulk-data');\n    return response.data;\n  }\n};\n\n// Convenience functions that match the App component expectations\nexport const checkAuthStatus = api.checkAuthStatus;\nexport const sendChatMessage = api.sendChatMessage;\nexport const getInvoices = api.getInvoices;\nexport const getInvoiceById = api.getInvoiceById;\nexport const createInvoice = api.createInvoice;\nexport const getCompanyInfo = api.getCompanyInfo;\nexport const getBulkData = api.getBulkData;\n\n// Error handling utility\nexport const handleApiError = error => {\n  if (error.response) {\n    var _error$response$data;\n    // Server responded with an error status\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.response.statusText;\n    return `Server Error: ${message}`;\n  } else if (error.request) {\n    // Request was made but no response received\n    return 'Network Error: Unable to connect to server';\n  } else {\n    // Something else happened\n    return `Error: ${error.message}`;\n  }\n};\n\n// Format currency utility\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount || 0);\n};\n\n// Format date utility\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(new Date(dateString));\n};\n\n// Get invoice status utility\nexport const getInvoiceStatus = invoice => {\n  if (!invoice) return 'unknown';\n  const balance = parseFloat(invoice.Balance || invoice.balance || 0);\n  const dueDate = invoice.DueDate || invoice.dueDate;\n  if (balance <= 0) return 'paid';\n  if (dueDate && new Date(dueDate) < new Date()) {\n    return 'overdue';\n  }\n  return 'unpaid';\n};","map":{"version":3,"names":["axios","defaults","withCredentials","api","checkAuthStatus","response","get","data","sendChatMessage","message","sessionId","post","getInvoices","params","getInvoiceById","id","createInvoice","invoiceData","getCompanyInfo","getBulkData","handleApiError","error","_error$response$data","statusText","request","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","dateString","DateTimeFormat","year","month","day","Date","getInvoiceStatus","invoice","balance","parseFloat","Balance","dueDate","DueDate"],"sources":["C:/Users/ok/Desktop/Invoice management/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// No need for full URL since we have proxy configured\r\n// const API_BASE_URL = 'http://localhost:3000';\r\n\r\n// Configure axios defaults\r\n// axios.defaults.baseURL = API_BASE_URL;\r\naxios.defaults.withCredentials = true;\r\n\r\n// API utility functions\r\nexport const api = {\r\n  // Authentication\r\n  checkAuthStatus: async () => {\r\n    const response = await axios.get('/api/status');\r\n    return response.data;\r\n  },\r\n\r\n  // AI Chat\r\n  sendChatMessage: async (message, sessionId = 'default') => {\r\n    const response = await axios.post('/api/ai/chat', {\r\n      message,\r\n      sessionId\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Invoices\r\n  getInvoices: async (params = {}) => {\r\n    const response = await axios.get('/api/invoices', { params });\r\n    return response.data;\r\n  },\r\n\r\n  getInvoiceById: async (id) => {\r\n    const response = await axios.get(`/api/invoices/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createInvoice: async (invoiceData) => {\r\n    const response = await axios.post('/api/invoices', invoiceData);\r\n    return response.data;\r\n  },\r\n\r\n  // Company\r\n  getCompanyInfo: async () => {\r\n    const response = await axios.get('/api/company');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk data\r\n  getBulkData: async () => {\r\n    const response = await axios.get('/api/bulk-data');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Convenience functions that match the App component expectations\r\nexport const checkAuthStatus = api.checkAuthStatus;\r\nexport const sendChatMessage = api.sendChatMessage;\r\nexport const getInvoices = api.getInvoices;\r\nexport const getInvoiceById = api.getInvoiceById;\r\nexport const createInvoice = api.createInvoice;\r\nexport const getCompanyInfo = api.getCompanyInfo;\r\nexport const getBulkData = api.getBulkData;\r\n\r\n// Error handling utility\r\nexport const handleApiError = (error) => {\r\n  if (error.response) {\r\n    // Server responded with an error status\r\n    const message = error.response.data?.error || error.response.statusText;\r\n    return `Server Error: ${message}`;\r\n  } else if (error.request) {\r\n    // Request was made but no response received\r\n    return 'Network Error: Unable to connect to server';\r\n  } else {\r\n    // Something else happened\r\n    return `Error: ${error.message}`;\r\n  }\r\n};\r\n\r\n// Format currency utility\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n  }).format(amount || 0);\r\n};\r\n\r\n// Format date utility\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'N/A';\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  }).format(new Date(dateString));\r\n};\r\n\r\n// Get invoice status utility\r\nexport const getInvoiceStatus = (invoice) => {\r\n  if (!invoice) return 'unknown';\r\n  \r\n  const balance = parseFloat(invoice.Balance || invoice.balance || 0);\r\n  const dueDate = invoice.DueDate || invoice.dueDate;\r\n  \r\n  if (balance <= 0) return 'paid';\r\n  \r\n  if (dueDate && new Date(dueDate) < new Date()) {\r\n    return 'overdue';\r\n  }\r\n  \r\n  return 'unpaid';\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}